#ifndef __MAIN_H__
#define __MAIN_H__
#include <vitasdk.h>
#include <stdbool.h>
#include "so_util.h"

// #define DEBUG
#define LOAD_ADDRESS 0x98000000

#define DEFAULT_STACK_SIZE 2*1024*1024
#define MEMORY_NEWLIB_MB 220
#define MEMORY_SCELIBC_MB 40

#define DATA_PATH "ux0:data/nfshp"
#define VAR_PATH DATA_PATH "/data"
#define OBB_PATH DATA_PATH "/main.2022.com.eamobile.nfshp_row_wf.obb"
#define SO_PATH  DATA_PATH "/libnfshp.so"

#define SCREEN_W 960
#define SCREEN_H 544

#define ENABLE_ACCELEROMETER false

typedef enum {
  INPUT_EVENT_INVALID = 0,

  DRIVING_INPUT_EVENT_START_ACCELERATING = 1001,
  DRIVING_INPUT_EVENT_STOP_ACCELERATING,
  DRIVING_INPUT_EVENT_START_BRAKING,
  DRIVING_INPUT_EVENT_STOP_BRAKING,
  DRIVING_INPUT_EVENT_START_HANDBRAKING,
  DRIVING_INPUT_EVENT_STOP_HANDBRAKING,

  // DRIVING_INPUT_EVENT_START_NITRO = 1011,
  // DRIVING_INPUT_EVENT_STOP_NITRO = 1012,
  DRIVING_INPUT_EVENT_TOGGLE_NITRO = 1013,
  DRIVING_INPUT_EVENT_START_OVERDRIVE,
  DRIVING_INPUT_EVENT_START_OILSLICK,
  DRIVING_INPUT_EVENT_START_JAMMER,
  DRIVING_INPUT_EVENT_START_ROADBLOCK,
  DRIVING_INPUT_EVENT_START_SPIKESTRIP,
  DRIVING_INPUT_EVENT_START_EMP,
  DRIVING_INPUT_EVENT_STEERING,

  SWIPE_EVENT_SWIPE_LEFT_STARTED = 1115,
  SWIPE_EVENT_SWIPE_RIGHT_STARTED,
  SWIPE_EVENT_SWIPE_UP_STARTED,
  SWIPE_EVENT_SWIPE_DOWN_STARTED,
  SWIPE_EVENT_SWIPE_LEFT_FINISHED,
  SWIPE_EVENT_SWIPE_RIGHT_FINISHED,
  SWIPE_EVENT_SWIPE_UP_FINISHED,
  SWIPE_EVENT_SWIPE_DOWN_FINISHED,
} nfshp_input_event_t;

typedef enum {
  MODULE_INVALID = -1,
  MODULE_ACCELEROMETER = 100,
  MODULE_DISPLAY = 400,
  MODULE_PHYSICAL_KEYBOARD = 600,
  MODULE_VIRTUAL_KEYBOARD = 700,
  MODULE_TOUCHSCREEN = 1000,
  MODULE_TOUCHPAD = 1100,
  MODULE_COMPASS = 1400,
  MODULE_GYROSCOPE = 1500,
  MODULE_MOUSE = 2200,
} nfshp_module_type_id_t;

typedef enum {
  TOUCH_UNDEFINED = 0,
  TOUCH_RAW_POINTER_CANCEL = 0xE,
  TOUCH_RAW_POINTER_MOVE = 0x4000E,
  TOUCH_RAW_POINTER_DOWN = 0x6000E,
  TOUCH_RAW_POINTER_UP = 0x8000E,
} nfshp_touch_action_id_t;

typedef enum {
  DISPLAY_ORIENTATION_UNKNOWN = 0,
  DISPLAY_ORIENTATION_NORMAL = 1,
  DISPLAY_ORIENTATION_ROTATED_RIGHT = 2,
  DISPLAY_ORIENTATION_UPSIDE_DOWN = 4,
  DISPLAY_ORIENTATION_ROTATED_LEFT = 8,
} nfshp_display_orientation_t;

typedef enum {
  DISPLAY_ORIENTATION_LOCK_UNKNOWN = 0,
  DISPLAY_ORIENTATION_LOCKED = 1,
  DISPLAY_ORIENTATION_UNLOCKED = 2,
} nfshp_display_orientation_lock_t;

typedef enum {
  DEVICE_ORIENTATION_UNKNOWN = 0,
  DEVICE_ORIENTATION_TOP_SIDE_UP = 1,
  DEVICE_ORIENTATION_LEFT_SIDE_UP = 2,
  DEVICE_ORIENTATION_BOTTOM_SIDE_UP = 4,
  DEVICE_ORIENTATION_RIGHT_SIDE_UP = 8,
  DEVICE_ORIENTATION_FRONT_SIDE_UP = 16,
} nfshp_device_orientation_t;

#define SCE_KERNEL_CPU_MASK_SHIFT		(16)
#define SCE_KERNEL_CPU_MASK_USER_0		(0x01 << SCE_KERNEL_CPU_MASK_SHIFT)
#define SCE_KERNEL_CPU_MASK_USER_1		(0x02 << SCE_KERNEL_CPU_MASK_SHIFT)
#define SCE_KERNEL_CPU_MASK_USER_2		(0x04 << SCE_KERNEL_CPU_MASK_SHIFT)
#define SCE_KERNEL_CPU_MASK_USER_ALL	\
			(SCE_KERNEL_CPU_MASK_USER_0 | SCE_KERNEL_CPU_MASK_USER_1 | SCE_KERNEL_CPU_MASK_USER_2)

#define MIN(a, b) (((a) < (b)) ? (a) : (b))
#define MAX(a, b) (((a) > (b)) ? (a) : (b))
#define ALIGN(x, a) (((x) + ((a)-1)) & ~((a)-1))

#ifdef DEBUG
int debugPrintf(char *text, ...);
#define CRASH_HERE *(void **)NULL = NULL
#else
#define debugPrintf (void)
#endif

extern so_module nfshp_mod;

extern bool keep_awake;

int ret0();
int ret1();

void nfshp_send_input_event(nfshp_input_event_t event, uintptr_t arg);
void nfshp_init_audio_track(int sampleRate, int outFormat, int bufferLen, long long userData);
void nfshp_stop_audio_track(void);

#endif
